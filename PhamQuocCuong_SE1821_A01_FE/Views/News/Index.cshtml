@model PagedResult<NewsDto>

@{
    ViewData["Title"] = "News List";
}

<h2 class="mb-4 text-center">News List</h2>

@if (TempData["success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="d-flex justify-content-between mb-3">
    <div>
        <form asp-action="Index" method="get" class="mb-3">
            <input type="hidden" name="isActive" value="@Context.Request.Query["isActive"]" />
            <input type="hidden" name="createdById" value="@Context.Request.Query["createdById"]" />
            <input type="hidden" name="pageSize" value="@Model.PageSize" />
            <input type="hidden" name="pageIndex" value="1" />

            <div class="d-flex gap-3">
                <div>
                    <input name="searchTerm"
                           value="@Context.Request.Query["searchTerm"]"
                           type="text" class="form-control"
                           placeholder="Search by title..." />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>

                <div>
                    <a asp-action="Index" class="btn btn-outline-primary">Clear Filters</a>
                </div>
            </div>
        </form>
        @{
            var isActiveString = Context.Request.Query["isActive"].ToString();
            bool? isActive = true;

            if (bool.TryParse(isActiveString, out var parsed))
            {
                isActive = parsed;
            }

            var toggledIsActive = isActive.HasValue ? !isActive.Value : false;
        }

        <div class="d-flex gap-3">

            @{
                var currentUserIdString = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                short? currentUserId = short.TryParse(currentUserIdString, out var uid) ? uid : null;

                var createdByIdQuery = Context.Request.Query["createdById"].ToString();
                bool isFilteringByMe = short.TryParse(createdByIdQuery, out var cid) && currentUserId == cid;

                var myToggleCreatedById = isFilteringByMe ? null : currentUserId;
            }

            <a asp-action="Index"
               asp-route-searchTerm="@Context.Request.Query["searchTerm"]"
               asp-route-isActive="@toggledIsActive"
               asp-route-createdById="@Context.Request.Query["createdById"]"
               asp-route-pageIndex="1"
               asp-route-pageSize="@Model.PageSize"
               class="btn btn-outline-primary">
                Show @(isActive == true ? "Inactive" : "Active") articles
            </a>

            @if (currentUserId != null)
            {
                <a asp-action="Index"
                   asp-route-searchTerm="@Context.Request.Query["searchTerm"]"
                   asp-route-isActive="@Context.Request.Query["isActive"]"
                   asp-route-createdById="@myToggleCreatedById"
                   asp-route-pageIndex="1"
                   asp-route-pageSize="@Model.PageSize"
                   class="btn @(isFilteringByMe ? "btn-primary" : "btn-outline-primary")">
                    Show articles created by me
                </a>
            }
        </div>

    </div>
    <div>
        <a asp-action="Create" class="btn btn-success">Create new article</a>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Created Date</th>
            <th>Is Active</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Items != null && Model.Items.Any())
        {
            foreach (var account in Model.Items)
            {
                <tr>
                    <td>@account.NewsArticleId</td>
                    <td>@account.NewsTitle</td>
                    <td>@account.CreatedDate?.ToString("dd/MM/yyyy")</td>
                    <td>@account.NewsStatus</td>
                    <td>
                        <a asp-route-id="@account.NewsArticleId" asp-action="Edit" class="btn btn-primary">Edit</a>
                        <a asp-route-id="@account.NewsArticleId" asp-action="Delete"
                           class="btn btn-danger"
                           onclick="return confirm('Are you sure you want to delete this news?');">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4">No News found.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
<nav class="mt-4">
    <ul class="pagination justify-content-center">
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                <a class="page-link"
                   href="@Url.Action("Index", new {
               pageIndex = i,
               pageSize = Model.PageSize,
               searchTerm = Context.Request.Query["searchTerm"],
               isActive = Context.Request.Query["isActive"],
               createdById = Context.Request.Query["createdById"]
           })">
                    @i
                </a>
            </li>
        }
    </ul>
</nav>
